library(caret)
install.packages("caret")
install.packages("kernlab")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=F)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(traing[,-58]))
M <- abs(cor(trainng[,-58]))
M <- abs(cor(training[,-58]))
diag(M) <- 0
View(M)
which(M>0.8, arr.ind=T)
names(spam)[c(34,32)]
smallSpam <- spam[,c(34,32)]
View(smallSpam)
prComp <-prcomp
prComp <-prcomp(smallSpam)
?prcomp
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type=="spam")*1+1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1], prComp$x[,2], col=typeColor, xlab="PC1", ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1),method ="pca", pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
View(spamPC)
plot(spamPC[,1], spamPC[,2], col = typeColor)
preProc <- preProcess(log10(training[,-58]+1), method = "pca", pcaComp = 2)
trainPC <- predict(preProc, log10(training[,-58]+1))
View(training)
View(trainPC)
preProc$dim
preProc$pcaComp
preProc$data
preProc$ica
modelFit <- train(training$type ~., method ="glm", data = trainPC)
modelFit <- train(training$type ~ .,method ="glm", data = trainPC)
install.packages("e1071")
library(e1071)
modelFit <- train(training$type ~ .,method ="glm", data = trainPC)
modelFit <- train(training$type ~ ,method ="glm", data = trainPC)
modelFit <- train(training$type ~.,method ="glm", data = trainPC)
modelFit <- train(training$type ~ .,method="glm", data=trainPC)
t <- training$type
modelFit <- train(t ~ .,method="glm", data=trainPC)
?train
modelFit <- train(training$type ~ trainPC,method="glm")
modelFit <- train(training$type ~ .,method="glm", preProcess ="pca", data = training)
modelFit <- train(type ~ .,method="glm", preProcess ="pca", data = training)
confusionMatrix(testing$type, predict(modelFit, testing))
install.packages("ISLR")
install.packages("ggplot2")
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
View(Wage)
Wage <- subset(Wage, select = c(logwage))
summary(Wage)
data(Wage)
Wage <- subset(Wage, select = -c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=0.7, list = F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age"."education","jobclass")], y=training$wage, plot="pairs")
featurePlot(x=training[,c("age","education","jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, data=training)
qplot(age, wage, colour=jobclass,data=training)
modFit <- train(wage ~ age + jobclass + education, method="lm", data = training)
finMod <- modFit$finalModel
print(modFit)
modFit$finalModel
plot(finMod, 1,pch=19,cex=0.5, col="#00000010")
pred <- predict(modFit, testing)
qplot(wage, pred,colour=year,data=training)
modFitAll <- train(wage ~., data=training, method = "lm")
pred <- predict(modFitAllï¼Œ testing)
pred <- predict(modFitAll,testing)
qplot(wage,pred,data = testing)
pred <- predict(modFit, testing)
qplot(wage, pred, colour=year, data=testing)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data(AlzheimerDisease)
rm(list=ls())
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
View(adData)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(adData)
View(concrete)
View(concrete)
View(mixtures)
names <- colnames(concrete)
featurePlot(training[,-9],training$CompressiveStrength, plot="pairs")
plot(seq_along(1:nrow(training)),training$CompressiveStrength)
seq_along(1:nrow(training))
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
names <- colnames(concrete)
names <- names[-length(names)]
featurePlot(x = training[, names], y = training$CompressiveStrength, plot = "pairs")
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer)+1)
> hist(training$Superplasticizer)
hist(training$Superplasticizer)
which(training$Superplasticizer<0)
which(mixtures$Superplasticizer<0)
hist(mixtures$Superplasticizer)
hist(log10(mixtures$Superplasticizer)+1)
which((mixtures$Superplasticizer==0)
)
t <- which(mixtures$Superplasticizer==0)
m <- mixtures[-t,]
hist(m$Superplasticizer)
hist(log10(m$Superplasticizer)+1)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1, 2) == "IL"])
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .9)
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
preProc <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
View(trainingIL)
ModelPCA <- train(diagnosis ~ ., method = "glm", preProcess="pca", thresh = 0.8, data=trainingIL)
?train
ModelPCA <- train(diagnosis ~ ., method = "glm", preProcess="pca", data=trainingIL)
confusionMatrix(testingIL$diagnosis, predict(ModelPCA, testingIL))
?train
Code<-c("A","B","C","D","C","D","A","A")
Value<-c(1, 2, 3, 4, 1, 2, 3, 4)
data<-data.frame(cbind(Code, Value))
data[match(as.character(data$Code), selected, nomatch = FALSE), ]
Code Value
selected<-c("A","B")
data[match(as.character(data$Code), selected, nomatch = FALSE), ]
data2[1] <- data
data2 <- NULL
data2[1] <- data
data2
shiny::runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
mtcars
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
runApp('C:/Users/310222402/Desktop/machinelearning/data product/myApp')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='angelindaqiao', token='6EFCAAD1F654039714B560DB12D4A244', secret='Ie/dmQCTDTsivM+nRrZmjsILQQ5Q10Tr7CHiwR68')
library(rsconnect)
rsconnect::deployApp('C:\Users\310222402\Desktop\machinelearning\data product\myApp')
setwd("C:/Users/310222402/Desktop/machinelearning/data product/myApp")
rsconnect::deployApp("C:/Users/310222402/Desktop/machinelearning/data product/myApp")
runApp()
install.packages("png")
library(png)
readPNG("C:/Users/310222402/Desktop/machinelearning/dataproduct/myApp/look.PNG")
readPNG("C:/Users/310222402/Desktop/machinelearning/data product/myApp/look.PNG")
library(png)
readPNG("C:/Users/310222402/Desktop/machinelearning/dataproduct/myApp/look.PNG")
library(png)
readPNG("C:/Users/310222402/Desktop/machinelearning/data product/myApp/look.PNG")
runApp()
library(png)
readPNG("C:/Users/310222402/Desktop/machinelearning/data product/myApp/look.PNG")
![some caption](look.png)
runApp()
